name: Daily GPT-5 Stock Alert to Discord

on:
  schedule:
    - cron: '0 4 * * *' # Runs every day at 04:00 UTC.
  workflow_dispatch: # Allows manual runs from the Actions tab.

permissions:
  contents: write

jobs:
  send-alert:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Restore cached data (aliases, universe, etc.)
        uses: actions/cache@v4
        with:
          path: data
          key: universe-cache-${{ github.run_id }}
          restore-keys: |
            universe-cache-

      - name: Purge valuation caches
        run: |
          rm -f data/pe_cache.json data/valuations_cache.json

      - name: Ensure dependency manifest
        run: |
          if [ ! -f requirements.txt ]; then
            printf "numpy\npandas\nyfinance\nrequests\npytz\n" > requirements.txt
          fi
          cat requirements.txt

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install --upgrade --upgrade-strategy eager numpy pandas yfinance requests pytz

      - name: Verify environment (debug)
        run: |
          python -V
          python -c "import pandas as pd, yfinance as yf, numpy as np; print('pandas', pd.__version__, 'yfinance', yf.__version__, 'numpy', np.__version__)"

      - name: Build universe.csv from Trading 212 (fallback to stale)
        env:
          T212_API_KEY: ${{ secrets.T212_API_KEY }}
          ALLOW_STALE: '1'
        run: |
          python scripts/universe_from_trading_212.py || true
          ls -lah data || true
          ls -lah data/universe.csv || true

      - name: Clean universe (fallback to stale)
        env:
          T212_API_KEY: ${{ secrets.T212_API_KEY }}
          CLEAN_ALLOW_OFFLINE: '1'
          ALLOW_STALE: '1'
        run: |
          python scripts/clean_universe.py || true
          wc -l data/universe_clean.csv || true
          head -n 5 data/universe_clean.csv || true

      - name: Auto-build Yahoo aliases from last run’s rejects
        env:
          ALIASES_FROM: data/universe_rejects.csv
          ALIASES_OUT: data/aliases.csv
          ALIASES_MAX_PER_RUN: '250'
          ALIAS_LOG_LEVEL: 'INFO'
          YF_TEST_PERIOD: '60d'
          YF_TEST_INTERVAL: '1d'
        run: |
          python scripts/aliases_autobuild.py || true

      - name: Run notifier
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

          # --- Logging ---
          PYTHONUNBUFFERED: '1'
          FEATURES_LOG_LEVEL: 'INFO'
          FEATURES_VERBOSE: '0'
          FEATURES_LOG_EVERY: '500'
          RANKER_LOG_LEVEL: 'DEBUG'
          RANKER_VERBOSE: '1'
          RANKER_LOG_EVERY: '300'
          QUICK_LOG_LEVEL: 'INFO'

          # --- Quick-sort full dump (top 2000) ---
          STAGE1_WRITE_TOPN_CSV: '1'
          STAGE1_TOPN_CSV: '2000'
          STAGE1_TOPN_PATH: 'logs/top2000_quick_full.csv'

          # --- yfinance ---
          YF_CHUNK_SIZE: '50'
          YF_MAX_RETRIES: '5'
          YF_RETRY_SLEEP: '2.5'

          # --- Tiering ---
          TIER_POLICY: 'TOPK_ADV'
          TIER_TOPK_LARGE: '500'
          TIER_BACKFILL_UNKNOWN_AS: 'small'

          # --- Stage-1 quick pass ---
          STAGE1_MODE: 'strict'
          STAGE1_KEEP: '200'
          STAGE1_MIN_SMALL: '100'
          STAGE1_MIN_LARGE: '100'
          STAGE1_RESCUE_FRAC: '0'
          STAGE1_WRITE_CSV: '1' # so we can commit Top-200 kept

          # --- Stage-2 profile ---
          RANKER_PROFILE: 'C'

          # --- Hard filters ---
          HARD_DROP_MODE: 'strict'
          HARD_GRACE_ATR: '2.0' # was 0.5; give early turns room

          # --- Early-turn detector (new) ---
          EARLY_TURN_MIN_E50_SLOPE: '2.0'
          EARLY_TURN_RSI_LO: '47.0'
          EARLY_TURN_RSI_HI: '63.0'
          EARLY_TURN_VS200_LO: '-12.0'
          EARLY_TURN_VS200_HI: '8.0'
          EARLY_TURN_VOL_LO: '110.0'
          EARLY_TURN_VOL_HI: '220.0'
          EARLY_TURN_VS200_PAD: '5.0'

          # --- Early-turn scoring bonuses (new) ---
          EARLY_TURN_BONUS_TREND: '0.18'
          EARLY_TURN_BONUS_MOMO: '0.22'
          EARLY_TURN_BONUS_STRUCT: '0.12'

          # --- AVWAP gentle reclaim bonus (new) ---
          AVWAP_RECLAIM_STRUCT_MAX: '0.18'
          AVWAP_RECLAIM_PREMIUM_CEIL: '0.08'

          # --- “First higher-high” nudge (new) ---
          MOMO_FIRSTHH_BONUS: '0.08'

          # --- Quick scorer weights (tech valuation & risk emphasized) ---
          QS_W_TREND_SMALL: '0.28'
          QS_W_MOMO_SMALL: '0.18'
          QS_W_STRUCT_SMALL: '0.36'
          QS_W_RISK_SMALL: '0.18'
          QS_W_TREND_LARGE: '0.32'
          QS_W_MOMO_LARGE: '0.18'
          QS_W_STRUCT_LARGE: '0.38'
          QS_W_RISK_LARGE: '0.12'

          # --- P/E tilt (low weight) ---
          QS_PE_WEIGHT: '0.02'
          QS_PE_WEIGHT_LARGE: '0.03'
          QS_PE_WEIGHT_SMALL: '0.01'

          # --- FVA & AVWAP shaping (tier-aware) ---
          QS_USE_FVA: '1'
          QS_FVA_PEN_MAX_SMALL: '14'
          QS_FVA_PEN_MAX_LARGE: '30'
          QS_FVA_BONUS_MAX_SMALL: '6'
          QS_FVA_BONUS_MAX_LARGE: '6'
          QS_FVA_KO_PCT_SMALL: '45'
          QS_FVA_KO_PCT_LARGE: '28'
          QS_STRUCT_PREM_CAP: '0' # neutral; gentle reclaims rewarded by AVWAP_RECLAIM_*

          # --- RobustRanker FVA KO haircut (global threshold) ---
          QS_FVA_KO_PCT: '12'

          # --- Valuation overlay into structure ---
          QS_VAL_OVERLAY: '1'
          QS_VAL_OVERLAY_MAX: '16'

          # --- ATH guard (RobustRanker) ---
          ATH_GUARD: '1'
          ATH_NEAR_PCT: '1.0'
          ATH_MIN_RSI: '80'
          ATH_MIN_VS50: '25'
          ATH_VOL_RELIEF: '60'
          ATH_SCORE_HAIRCUT: '22'

          # --- Valuation Z-scores in prompt blocks (enable & pool) ---
          VAL_ZS_ENABLE: '1'
          VAL_ZS_POOL: 'stage2' # 'stage2' (default) or 'top10'

          # --- OpenAI call knobs ---
          OPENAI_TIMEOUT: '360'
          OPENAI_MAX_TOKENS: '13000'
          # OPENAI_MODEL: 'gpt-5'   # optional override

          # --- Dump exact GPT inputs ---
          LOG_GPT_INPUT: '1'
          LOG_GPT_INPUT_STDOUT: '0'
          # DEBUGGER_FORCE_POST: '1' # uncomment to always post debug embeds if parsing fails

          # --- Prompt floors & knobs (documentary; enforced in prompt logic) ---
          TECH_VAL_FLOOR_PCT: '0.30'
          TECH_VAL_STRONG_FLOOR_PCT: '0.45'
          RISK_FLOOR_PCT: '0.30'
          NEWS_DELTA_MAX: '25'
          FVA_TREND_SOFTEN_MAX: '0.35'
          PEG_PROXY_BONUS: '3'
        run: |
          python scripts/notify.py

      - name: Find latest blocks file
        id: pick_file
        shell: bash
        run: |
          set -e
          FILE=$(ls -1t data/logs/blocks_to_gpt_*.txt 2>/dev/null | head -n1 || true)
          if [ -z "$FILE" ]; then
            echo "found=0" >> "$GITHUB_OUTPUT"
            echo "No blocks_to_gpt_*.txt found"
          else
            echo "found=1" >> "$GITHUB_OUTPUT"
            echo "file=$FILE" >> "$GITHUB_OUTPUT"
            echo "basename=$(basename "$FILE")" >> "$GITHUB_OUTPUT"
          fi

      - name: Commit blocks file to repo (overwrite single file)
        if: steps.pick_file.outputs.found == '1'
        shell: bash
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          mkdir -p logs
          cp "${{ steps.pick_file.outputs.file }}" "logs/blocks_to_gpt_latest.txt"
          git add "logs/blocks_to_gpt_latest.txt"
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update latest GPT blocks (run #${{ github.run_number }})"
            git push
          fi

      - name: Commit top2000 quick-sort CSV to repo
        shell: bash
        run: |
          set -e
          FILE="logs/top2000_quick_full.csv"
          if [ -f "$FILE" ]; then
            git config user.name  "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add "$FILE"
            if git diff --cached --quiet; then
              echo "No changes to commit for $FILE."
            else
              git commit -m "Add/update top2000 quick-sort CSV (run #${{ github.run_number }})"
              git push
            fi
          else
            echo "No $FILE produced."
          fi

      - name: Commit top200 kept CSV to repo
        shell: bash
        run: |
          set -e
          FILE="data/stage1_kept.csv"
          if [ -f "$FILE" ]; then
            git config user.name  "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add "$FILE"
            if git diff --cached --quiet; then
              echo "No changes to commit for $FILE."
            else
              git commit -m "Add/update top200 kept CSV (run #${{ github.run_number }})"
              git push
            fi
          else
            echo "No $FILE produced (enable STAGE1_WRITE_CSV=1)."
          fi
