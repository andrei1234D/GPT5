name: Daily GPT-5 Stock Alert to Discord

on:
  schedule:
    - cron: "0 4 * * *"   # 04:00 UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  send-alert:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Restore cached data (aliases, universe, etc.)
        uses: actions/cache@v4
        with:
          path: data
          key: universe-cache-${{ github.run_id }}
          restore-keys: |
            universe-cache-

      # Create a minimal requirements.txt so setup-python's pip cache has a key
      - name: Ensure dependency manifest
        run: |
          if [ ! -f requirements.txt ]; then
            printf "numpy\npandas\nyfinance\nrequests\npytz\n" > requirements.txt
          fi
          echo "Using requirements.txt:"
          cat requirements.txt

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install --upgrade --upgrade-strategy eager numpy pandas yfinance requests pytz

      - name: Verify environment (debug)
        run: |
          python -V
          python -c "import pandas as pd, yfinance as yf, numpy as np; print('pandas', pd.__version__, 'yfinance', yf.__version__, 'numpy', np.__version__)"

      - name: Build universe.csv from Trading 212 (fallback to stale)
        env:
          T212_API_KEY: ${{ secrets.T212_API_KEY }}   # Trading212 auth
          ALLOW_STALE: "1"                            # allow old universe
        run: |
          python scripts/universe_from_trading_212.py || true
          ls -lah data || true
          ls -lah data/universe.csv || true

      - name: Clean universe (fallback to stale)
        env:
          T212_API_KEY: ${{ secrets.T212_API_KEY }}   # Trading212 auth
          CLEAN_ALLOW_OFFLINE: "1"                    # no API? keep going
          ALLOW_STALE: "1"                            # allow old files
        run: |
          python scripts/clean_universe.py || true
          wc -l data/universe_clean.csv || true
          head -n 5 data/universe_clean.csv || true

      - name: Auto-build Yahoo aliases from last run’s rejects
        env:
          ALIASES_FROM: data/universe_rejects.csv     # input rejects
          ALIASES_OUT:  data/aliases.csv              # output aliases
          ALIASES_MAX_PER_RUN: "250"                  # cap per run
          ALIAS_LOG_LEVEL: "INFO"                     # alias logs
          YF_TEST_PERIOD: "60d"                       # test history
          YF_TEST_INTERVAL: "1d"                      # test interval
        run: |
          python scripts/aliases_autobuild.py || true

      - name: Run notifier
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}   # GPT auth
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}  # main channel

          # --- Logging ---
          PYTHONUNBUFFERED: "1"            # flush logs
          FEATURES_LOG_LEVEL: "DEBUG"      # features log level
          FEATURES_VERBOSE: "1"            # extra features logs
          FEATURES_LOG_EVERY: "300"        # features heartbeat
          RANKER_LOG_LEVEL: "DEBUG"        # Stage-2 log level
          RANKER_VERBOSE: "1"              # extra Stage-2 logs
          RANKER_LOG_EVERY: "300"          # ranker heartbeat
          QUICK_LOG_LEVEL: "INFO"          # Stage-1 log level

          # --- yfinance tuning ---
          YF_CHUNK_SIZE: "60"              # batch size
          YF_MAX_RETRIES: "2"              # yf retries
          YF_RETRY_SLEEP: "3.0"            # retry backoff (s)

          # --- Tiering policy ---
          TIER_POLICY: "TOPK_ADV"          # tier mode
          TIER_TOPK_LARGE: "500"           # # large by ADV
          TIER_BACKFILL_UNKNOWN_AS: "small" # missing ADV → small

          # --- Stage-1 quick pass ---
          STAGE1_MODE: "loose"             # strictness
          STAGE1_KEEP: "200"               # survivors to S2
          STAGE1_MIN_SMALL: "100"          # min small in keep
          STAGE1_MIN_LARGE: "100"          # min large in keep
          STAGE1_RESCUE_FRAC: "0.15"       # rescue edge %
          STAGE1_WRITE_CSV: "0"            # write CSV toggle

          # --- Stage-2 stratified Top-10 ---
          STAGE2_MIN_SMALL: "5"            # small in Top-10
          STAGE2_MIN_LARGE: "5"            # large in Top-10
          STAGE2_MIN_PE: "5"               # with PE present

          # --- P/E tilt tuning (quick scorer) ---
          QS_PE_WEIGHT: "0.06"             # base PE tilt
          QS_PE_WEIGHT_LARGE: "0.10"       # large-cap tilt
          QS_PE_WEIGHT_SMALL: "0.04"       # small-cap tilt
          QS_USE_XS: "1"                   # use x-sec z-scores

          # --- Small-cap liquidity dampening ---
          QS_SMALL_PRICE_MAX: "8"          # small if ≤$8
          QS_SMALL_LIQ_MAX: "8000000"      # small if <$8M ADV
          QS_MIN_DOLLAR_VOL_20D: "3000000" # min $vol guard

          # --- Optional: P/E refine pass ---
          STAGE1_PE_RESCORE: "1"           # enable PE pass
          STAGE1_PE_POOL: "2000"           # fetch PE for N

          # --- Trash Ranker hard drops ---
          HARD_DROP_MODE: "loose"          # off/loose/normal/strict
          HARD_GRACE_ATR: "2.0"            # ATR leniency

          # --- All-time-high guard ---
          ATH_GUARD: "1"                   # enable ATH cut
          ATH_NEAR_PCT: "1.0"              # within 1% of high
          ATH_MIN_RSI: "80"                # RSI trigger
          ATH_MIN_VS50: "25"               # vsEMA50 trigger
          ATH_VOL_RELIEF: "60"             # volume relief %
          ATH_SCORE_HAIRCUT: "22"          # max score cut

          # --- OpenAI call timeout (seconds) ---
          OPENAI_TIMEOUT: "360"            # GPT timeout

          # --- Dump exact GPT inputs ---
          LOG_GPT_INPUT: "1"               # write blocks file
          LOG_GPT_INPUT_STDOUT: "0"        # echo previews
        run: |
          python scripts/notify.py

      - name: Find latest blocks file
        id: pick_file
        shell: bash
        run: |
          set -e
          FILE=$(ls -1t data/logs/blocks_to_gpt_*.txt 2>/dev/null | head -n1 || true)
          if [ -z "$FILE" ]; then
            echo "found=0" >> "$GITHUB_OUTPUT"
            echo "No blocks_to_gpt_*.txt found"
          else
            echo "found=1" >> "$GITHUB_OUTPUT"
            echo "file=$FILE" >> "$GITHUB_OUTPUT"
            echo "basename=$(basename "$FILE")" >> "$GITHUB_OUTPUT"
          fi

      - name: Commit blocks file to repo (overwrite single file)
        if: steps.pick_file.outputs.found == '1'
        shell: bash
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          mkdir -p logs
          cp "${{ steps.pick_file.outputs.file }}" "logs/blocks_to_gpt_latest.txt"
          git add "logs/blocks_to_gpt_latest.txt"
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update latest GPT blocks (run #${{ github.run_number }})"
            git push
          fi
